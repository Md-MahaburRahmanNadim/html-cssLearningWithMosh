.container {
  display: grid;
  /* 3x2 (rowxcolumns */
  /* grid-template-rows: repeat(3, 100px);
  grid-template-columns: repeat(2, 100px);
  
  shorthand porperty of this two things is 
  grid-template: row / columns

  grid-template: repeat(3, 100px) / repeat(2, 100px);
  */
  /* if you need % value then you have to use (fr) rather then the (%) value (fr) means the free avaliable space*/

  /* fix auto(adjust with the size of the height) fix / 30% 70%(30fr 70fr) */
  grid-template: 100px auto 100px / 30fr 70fr;

  /* gap between row and columns */
  /* row-gap: 10px;
  column-gap: 10px; */
  gap: 10px;

  border: 3px solid gray;
  /* for aligning the item in horizontal and vartical axis 

  initial value of those things
  justify-items: stretch;
  align-items: stretch;
  */
  /* justify-items: center;
  align-items: center; */
  /* for aligning the grid-container in horizontal and vartical axis 
  justify-content: center;
  align-content: center;
  */
  height: 100vh;
  /* placing items in named area by using "" quets */
  grid-template-areas:
    "header header" /* it's columns cell divded 2 areas if we have 6 cell then we have to give 6 name if we want to enpty an cell then we have to put (.) insted of the name */
    "aside  main "
    ".      footer";
}

.box {
  background: gold;
}
/* pleasing items by using (grid-row,grid-columns, grid-area) */
.box-one {
  /* grid-column: 1 / 3;
  grid-column: 1 / span 2;
  grid-row: 2/4;
  grid-row: 2 / span 2;
  /* start/start
     row(end)/columns(end) 
  grid-area: 1/1/2/3; */
  grid-area: header;
  /*IT'S very simple right? because it's has only one line of code but look at the avobe how nasty code right   */
}

/* pleasing items by using (named areas) which very readable
first we have to give ever columns a name in container by using "" quets then 
*/

.box-four {
  grid-area: footer;
}
.box-three {
  grid-area: aside;
}
